// Code generated by MockGen. DO NOT EDIT.
// Source: uuid.go
//
// Generated by this command:
//
//	mockgen -source=uuid.go -destination=mocks/mock.go
//
// Package mock_generation is a generated GoMock package.
package mock_generation

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIdGenerator is a mock of IdGenerator interface.
type MockIdGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockIdGeneratorMockRecorder
}

// MockIdGeneratorMockRecorder is the mock recorder for MockIdGenerator.
type MockIdGeneratorMockRecorder struct {
	mock *MockIdGenerator
}

// NewMockIdGenerator creates a new mock instance.
func NewMockIdGenerator(ctrl *gomock.Controller) *MockIdGenerator {
	mock := &MockIdGenerator{ctrl: ctrl}
	mock.recorder = &MockIdGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdGenerator) EXPECT() *MockIdGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockIdGenerator) Generate(ctx context.Context) string {
	return "GENERATED_UUID"
}

// Generate indicates an expected call of Generate.
func (mr *MockIdGeneratorMockRecorder) Generate(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockIdGenerator)(nil).Generate), ctx)
}
